#!/usr/bin/env python3

import base64
import os
import subprocess
import azure.identity
import azure.keyvault.secrets
import kr8s
import argparse


def parse_args(args=None):
    parser = argparse.ArgumentParser()
    parser.add_argument("--keyvault-name", required=True)
    parser.add_argument("--namespace", required=True)
    parser.add_argument("--secret-name", required=True)

    return parser.parse_args(args)


def main(args=None):
    args = parse_args(args)

    keyvault_name = args.keyvault_name
    namespace = args.namespace
    secret_name = args.secret_name

    credential = azure.identity.DefaultAzureCredential()
    kv_client = azure.keyvault.secrets.SecretClient(
        f"https://{keyvault_name}.vault.azure.net", credential=credential
    )

    secret = kv_client.get_secret(secret_name)
    decoded = base64.b64decode(secret.value)

    pfx = "certificate.pfx"
    key = "private.key"
    crt = "certificate.crt"

    with open(pfx, "wb") as f:
        f.write(decoded)

    cmd = f"openssl pkcs12 -in {pfx} -nocerts -nodes -passin pass: | openssl rsa -out {key}"

    print("processing certificate")
    subprocess.run(cmd, shell=True)
    subprocess.run(
        [
            "openssl",
            "pkcs12",
            "-in",
            pfx,
            "-clcerts",
            "-nokeys",
            "-passin",
            "pass:",
            "-out",
            crt,
        ]
    )

    print("creating secret")
    subprocess.run(
        [
            "kubectl",
            "-n",
            namespace,
            "create",
            "secret",
            "tls",
            secret_name,
            "--cert",
            crt,
            "--key",
            key,
        ]
    )

    os.remove(pfx)
    os.remove(crt)
    os.remove(key)


if __name__ == "__main__":
    main()
