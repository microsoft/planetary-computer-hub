#!/usr/bin/env python3
import sys
import hcl
import asyncio


async def check_image(image_name):
    return 0
    cmd = [
        "az",
        "acr",
        "repository",
        "show",
        "--name=pcccr",
        f"--image={image_name}",
    ]
    proc = await asyncio.create_subprocess_shell(" ".join(cmd))
    await proc.wait()
    return proc.returncode


async def check_file(file):
    with open(file) as f:
        config = hcl.load(f)

    images = ["python_image", "r_image", "gpu_pytorch_image", "gpu_tensorflow_image"]

    image_names = [
        config["module"]["resources"][image].split("/", 1)[1] for image in images
    ]

    errors = []
    for image_name in image_names:
        error = await check_image(image_name)
        if error:
            print("error!", image_name, error)
            errors.append(image_name)

    return errors


async def main(files):
    errors = []
    for file in files:
        print(f"checking {file}")
        result = await check_file(file)
        if result:
            errors.extend(result)

    if errors:
        for image in errors:
            print(f"Missing image for {image}")
        return 1


if __name__ == "__main__":
    sys.exit(asyncio.run(main(sys.argv[1:])))
